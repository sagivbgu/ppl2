(define map
  (lambda (func lst)
    (if (eq? lst '())
        '()
        (cons (func (car lst))
              (map func (cdr lst))))))

(define reduce
  (lambda (reducer init l)
    (if (eq? lst '())
        init
        (reducer (car l) 
                 (reduce reducer init (cdr l))))))

(define length-of-lst
  (lambda (lst)
    (if (eq? lst '())
         0
         (+ 1 (length-of-lst(cdr lst))))))

(define last-element
  (lambda (lst)
    (if (eq? '() (cdr lst))
        (car lst)
        (last-element (cdr lst)))))

(define power
    (lambda (n1 n2)
        (cond ((= 0 n2) 1)
              ((= 1 n2) n1)
              (else (* n1 (power n1 (- n2 1)))))))

(define sum-lst-power
    (lambda (lst n)
      (reduce + 0 (map (lambda (x) (power x n)) lst))))
  
(define remove-last-element
  (lambda (lst)
    (if (eq? '() (cdr lst))
        '()
        (cons (car lst) (remove-last-element (cdr lst))))))

(define num-from-digits
  (lambda (lst)
    (if (eq? lst '())
        0
        (+ (last-element lst) (* 10 (num-from-digits (remove-last-element lst)))))))

(define is-narcissistic
  (lambda (lst)
      (if (eq? (sum-lst-power lst (length-of-lst lst)) (num-from-digits lst) )
      #t
      #f)))